// Mocks generated by Mockito 5.4.4 from annotations
// in athena_sql/test/drivers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:athena_sql/src/builders/builders.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

import 'utils/driver.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAthenaColumnsDriver_0 extends _i1.SmartFake
    implements _i2.AthenaColumnsDriver {
  _FakeAthenaColumnsDriver_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAthenaQueryResponse_1 extends _i1.SmartFake
    implements _i2.AthenaQueryResponse {
  _FakeAthenaQueryResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_2<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TestDatabaseDriver].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestDatabaseDriver extends _i1.Mock
    implements _i4.TestDatabaseDriver {
  MockTestDatabaseDriver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic Function(String) get executable => (super.noSuchMethod(
        Invocation.getter(#executable),
        returnValue: (String __p0) => null,
      ) as dynamic Function(String));

  @override
  _i2.AthenaColumnsDriver get columns => (super.noSuchMethod(
        Invocation.getter(#columns),
        returnValue: _FakeAthenaColumnsDriver_0(
          this,
          Invocation.getter(#columns),
        ),
      ) as _i2.AthenaColumnsDriver);

  @override
  _i3.Future<_i2.AthenaQueryResponse> execute(
    String? queryString, {
    Map<String, dynamic>? mapValues,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [queryString],
          {#mapValues: mapValues},
        ),
        returnValue: _i3.Future<_i2.AthenaQueryResponse>.value(
            _FakeAthenaQueryResponse_1(
          this,
          Invocation.method(
            #execute,
            [queryString],
            {#mapValues: mapValues},
          ),
        )),
      ) as _i3.Future<_i2.AthenaQueryResponse>);

  @override
  _i3.Future<bool> tableExists(String? table) => (super.noSuchMethod(
        Invocation.method(
          #tableExists,
          [table],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<T> transaction<T>(
          _i3.Future<T> Function(_i2.AthenaDatabaseDriver)? trx) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [trx],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [trx],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_2<T>(
              this,
              Invocation.method(
                #transaction,
                [trx],
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  String mapColumnOrTable(String? column) => (super.noSuchMethod(
        Invocation.method(
          #mapColumnOrTable,
          [column],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #mapColumnOrTable,
            [column],
          ),
        ),
      ) as String);
}
